// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RandomNumberReceived extends ethereum.Event {
  get params(): RandomNumberReceived__Params {
    return new RandomNumberReceived__Params(this);
  }
}

export class RandomNumberReceived__Params {
  _event: RandomNumberReceived;

  constructor(event: RandomNumberReceived) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Raffle extends ethereum.SmartContract {
  static bind(address: Address): Raffle {
    return new Raffle("Raffle", address);
  }

  canPayForARequest(): boolean {
    let result = super.call(
      "canPayForARequest",
      "canPayForARequest():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_canPayForARequest(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPayForARequest",
      "canPayForARequest():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRandomNumber(limit: BigInt): Bytes {
    let result = super.call(
      "getRandomNumber",
      "getRandomNumber(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(limit)]
    );

    return result[0].toBytes();
  }

  try_getRandomNumber(limit: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRandomNumber",
      "getRandomNumber(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(limit)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  limitNumber(param0: Bytes): BigInt {
    let result = super.call("limitNumber", "limitNumber(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_limitNumber(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "limitNumber",
      "limitNumber(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randomResult(param0: Bytes): BigInt {
    let result = super.call("randomResult", "randomResult(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_randomResult(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "randomResult",
      "randomResult(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GetRandomNumberCall extends ethereum.Call {
  get inputs(): GetRandomNumberCall__Inputs {
    return new GetRandomNumberCall__Inputs(this);
  }

  get outputs(): GetRandomNumberCall__Outputs {
    return new GetRandomNumberCall__Outputs(this);
  }
}

export class GetRandomNumberCall__Inputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }

  get limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetRandomNumberCall__Outputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
